[{"C:\\Users\\ziv\\WebstormProjects\\project\\src\\index.js":"1","C:\\Users\\ziv\\WebstormProjects\\project\\src\\main.js":"2","C:\\Users\\ziv\\WebstormProjects\\project\\src\\Routes.js":"3","C:\\Users\\ziv\\WebstormProjects\\project\\src\\LoginForm.js":"4","C:\\Users\\ziv\\WebstormProjects\\project\\src\\RegistrationFormElderly.js":"5","C:\\Users\\ziv\\WebstormProjects\\project\\src\\RegistrationFormResponsible.js":"6","C:\\Users\\ziv\\WebstormProjects\\project\\src\\RegistrationFormOrganization.js":"7","C:\\Users\\ziv\\WebstormProjects\\project\\src\\RegistrationFormVolunteer.js":"8","C:\\Users\\ziv\\WebstormProjects\\project\\src\\Modal.js":"9","C:\\Users\\ziv\\WebstormProjects\\project\\src\\resources\\genders.js":"10","C:\\Users\\ziv\\WebstormProjects\\project\\src\\resources\\languages.js":"11","C:\\Users\\ziv\\WebstormProjects\\project\\src\\resources\\areasOfInterest.js":"12","C:\\Users\\ziv\\WebstormProjects\\project\\src\\resources\\cities.js":"13"},{"size":223,"mtime":1609786667443,"results":"14","hashOfConfig":"15"},{"size":280,"mtime":1609789633861,"results":"16","hashOfConfig":"15"},{"size":1243,"mtime":1609790081051,"results":"17","hashOfConfig":"15"},{"size":1373,"mtime":1609789587343,"results":"18","hashOfConfig":"15"},{"size":14420,"mtime":1609786181609,"results":"19","hashOfConfig":"15"},{"size":11703,"mtime":1609781702252,"results":"20","hashOfConfig":"15"},{"size":7796,"mtime":1609774572161,"results":"21","hashOfConfig":"15"},{"size":14426,"mtime":1609774572165,"results":"22","hashOfConfig":"15"},{"size":1663,"mtime":1609606258568,"results":"23","hashOfConfig":"15"},{"size":174,"mtime":1609701449399,"results":"24","hashOfConfig":"15"},{"size":817,"mtime":1609701449319,"results":"25","hashOfConfig":"15"},{"size":673,"mtime":1609701449299,"results":"26","hashOfConfig":"15"},{"size":3952,"mtime":1609701449283,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"y7euxm",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\ziv\\WebstormProjects\\project\\src\\index.js",[],["57","58"],"C:\\Users\\ziv\\WebstormProjects\\project\\src\\main.js",[],"C:\\Users\\ziv\\WebstormProjects\\project\\src\\Routes.js",[],"C:\\Users\\ziv\\WebstormProjects\\project\\src\\LoginForm.js",[],"C:\\Users\\ziv\\WebstormProjects\\project\\src\\RegistrationFormElderly.js",[],"C:\\Users\\ziv\\WebstormProjects\\project\\src\\RegistrationFormResponsible.js",["59","60","61"],"import React, {Component} from 'react';\r\nimport Select from \"react-select\";\r\nimport Modal from './Modal.js';\r\nimport './RegistrationForm.css';\r\nimport languagesList from './resources/languages';\r\nimport areasOfInterestList from './resources/areasOfInterest';\r\nimport citiesList from './resources/cities';\r\nimport genderList from './resources/genders';\r\n\r\nclass RegistrationFormResponsible extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            organizationName:'',\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            username: '',\r\n            password: '',\r\n            gender: '',\r\n            valid: {\r\n                firstName: true,\r\n                lastName: true,\r\n                username: true,\r\n                password: true,\r\n                email: true,\r\n            },\r\n            touched: {\r\n                organizationName:false,\r\n                firstName: false,\r\n                lastName: false,\r\n                username: false,\r\n                password: false,\r\n                email: false,\r\n                gender:false\r\n            },\r\n            modalisOpen: false\r\n        };\r\n\r\n        this.rexExpMap = {\r\n            organizationName: /^[a-zA-Z\\u00c4\\u00e4\\u00d6\\u00f6\\u00dc\\u00fc\\u00df]+$/,\r\n            firstName: /^[a-zA-Z\\u00c4\\u00e4\\u00d6\\u00f6\\u00dc\\u00fc\\u00df]+$/,\r\n            lastName: /^[a-zA-Z\\u00c4\\u00e4\\u00d6\\u00f6\\u00dc\\u00fc\\u00df]+$/,\r\n            username: /^[a-z\\d._]+$/,\r\n            password: /^.{8,}$/,\r\n            email: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/,\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.checkData = this.checkData.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.checkOnSubmit = this.checkOnSubmit.bind(this);\r\n\r\n    }\r\n\r\n    handleChange = (e, name) => {\r\n        this.setState({[e.target.name]: e.target.value}, () => {\r\n            this.checkData(this.rexExpMap[name], this.state[name], this.state.valid[name], name)\r\n        });\r\n    }\r\n\r\n    checkData(regExp, stateName, stateValid, name) {\r\n        this.setState({\r\n            touched: {...this.state.touched, [name]: true}\r\n        });\r\n        if (regExp.test(stateName)) {\r\n            this.setState({\r\n                valid: {...this.state.valid, [name]: true}\r\n            });\r\n        } else {\r\n            this.setState({\r\n                valid: {...this.state.valid, [name]: false}\r\n            });\r\n        }\r\n    }\r\n\r\n    validate(firstName, lastName, username, password, email) {\r\n        return {\r\n            firstName: firstName.length === 0,\r\n            lastName: lastName.length === 0,\r\n            username: username.length === 0,\r\n            password: password.length === 0,\r\n            email: email.length === 0\r\n        };\r\n    }\r\n\r\n    requiredStyle(name) {\r\n        const show = (this.state[name] === \"\" || !this.state.valid[name]) && this.state.touched[name];\r\n        return {display: show ? 'block' : 'none'}\r\n    }\r\n\r\n    errorMessages(name) {\r\n        const requiredStr = 'This field is required.';\r\n        const invalidStr = 'Enter valid ' + name + '.';\r\n        return !this.state.valid[name] && this.state[name] !== \"\" ? invalidStr : requiredStr\r\n    }\r\n\r\n    checkOnSubmit() {\r\n        console.log(\"checkOnSubmit\");\r\n        const {firstName, lastName, username, password, email} = this.state;\r\n        const formFilled = !(firstName === '' || lastName === '' || username === '' || password === '' || email === '');\r\n        const formInvalid = Object.keys(this.state.valid).some(x => !this.state.valid[x]);\r\n        const formHasErrors = !formFilled || formInvalid;\r\n\r\n        if (!formHasErrors) {\r\n            this.toggleModal();\r\n        }\r\n        this.setState({\r\n            touched: {\r\n                organizationName:true,\r\n                firstName: true,\r\n                lastName: true,\r\n                username: true,\r\n                password: true,\r\n                email: true,\r\n            },\r\n        });\r\n\r\n        this.handleSubmit()\r\n    }\r\n\r\n    handleSubmit() {\r\n        fetch(`http://localhost:3001/admin/registerResponsible`, {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({...this.state})\r\n        })\r\n            .then(response => console.log(response.json()))\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState(prevState => ({\r\n            modalisOpen: !prevState.modalisOpen\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const errors = this.validate(this.state.firstName, this.state.lastName,\r\n            this.state.username, this.state.password, this.state.email);\r\n        const shouldMarkError = (field) => {\r\n            const hasError = errors[field];\r\n            const shouldShow = this.state.touched[field];\r\n            return hasError ? shouldShow : false;\r\n        }\r\n        const helpMessage = (name) => {\r\n            return {display: shouldMarkError(name) ? 'none' : 'block'}\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"register-form\">\r\n                    <div className=\"form\">\r\n                        <div>\r\n                            <label>\r\n                                שם ארגון\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.organizationName}\r\n                                    name=\"organizationName\"\r\n                                    className={shouldMarkError(\"organizationName\") ? \"error\" : \"\"}\r\n                                    onChange={(e) => this.handleChange(e, \"organizationName\")}/>\r\n                            </label>\r\n                            <span className=\"required-field\"\r\n                                  style={this.requiredStyle('organizationName')}>{this.errorMessages('organizationName')}</span>\r\n                        </div>\r\n                        <div>\r\n                            <label>\r\n                                שם פרטי\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.firstName}\r\n                                    name=\"firstName\" id=\"firstName\"\r\n                                    className={shouldMarkError(\"firstName\") ? \"error\" : \"\"}\r\n                                    onChange={(e) => this.handleChange(e, \"firstName\")}/>\r\n                            </label>\r\n                            <span className=\"required-field\"\r\n                                  style={this.requiredStyle('firstName')}>{this.errorMessages('firstName')}</span>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label>\r\n                                שם משפחה\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.lastName}\r\n                                    name=\"lastName\" id=\"lastName\"\r\n                                    className={shouldMarkError(\"lastName\") ? \"error\" : \"\"}\r\n                                    onChange={(e) => this.handleChange(e, \"lastName\")}/>\r\n                            </label>\r\n                            <span className=\"required-field\"\r\n                                  style={this.requiredStyle('lastName')}>{this.errorMessages('lastName')}</span>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label>\r\n                                שם משתמש\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.username}\r\n                                    name=\"username\"\r\n                                    className={shouldMarkError(\"username\") ? \"error\" : \"\"}\r\n                                    onChange={(e) => this.handleChange(e, \"username\")}/>\r\n                            </label>\r\n                            <span className=\"required-field\"\r\n                                  style={this.requiredStyle('username')}>{this.errorMessages('username')}</span>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label>\r\n                                סיסמה\r\n                                <input\r\n                                    type=\"password\"\r\n                                    value={this.state.password}\r\n                                    name=\"password\"\r\n                                    className={shouldMarkError(\"password\") ? \"error\" : \"\"}\r\n                                    onChange={(e) => this.handleChange(e, \"password\")}/>\r\n                            </label>\r\n                            <span className=\"note\" style={helpMessage('password')}>At least 8 characters</span>\r\n                            <span className=\"required-field\"\r\n                                  style={this.requiredStyle('password')}>{this.errorMessages('password')}</span>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label>\r\n                                כתובת דואר אלקטרוני\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"email\"\r\n                                    value={this.state.email}\r\n                                    className={shouldMarkError(\"email\") ? \"error\" : \"\"}\r\n                                    onChange={(e) => this.handleChange(e, \"email\")}/>\r\n                            </label>\r\n                            <span className=\"note\" style={helpMessage('email')}>An activatoin link will be sent to this email</span>\r\n                            <span className=\"required-field\"\r\n                                  style={this.requiredStyle('email')}>{this.errorMessages('email')}</span>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label>\r\n                                מגדר\r\n                                <Select\r\n                                    name=\"gender\"\r\n                                    className={shouldMarkError(\"gender\") ? \"error\" : \"\"}\r\n                                    value ={this.state.gender}\r\n                                    options={genderList}\r\n                                    onChange={(value)=>this.setState({gender: value})}\r\n                                />\r\n                            </label>\r\n                            <span className=\"required-field\"\r\n                                  style={this.requiredStyle('gender')}>{this.errorMessages('gender')}</span>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"sb-text\">By clicking Submit, I agree that I have read and accepted the&nbsp;\r\n                            <a href='TermsandConditions'>Terms and Conditions.</a>\r\n                        </div>\r\n                        <button className=\"sb-btn\" type=\"button\" onClick={this.checkOnSubmit}>SUBMIT</button>\r\n                    </div>\r\n                </div>\r\n                {this.state.modalisOpen ?\r\n                    <Modal\r\n                        text='Your Data'\r\n                        {...this.state}\r\n                        closeModal={this.toggleModal}\r\n                    />\r\n                    : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegistrationFormResponsible;","C:\\Users\\ziv\\WebstormProjects\\project\\src\\RegistrationFormOrganization.js",["62","63"],"import React, {Component} from 'react';\r\nimport Modal from './Modal.js';\r\nimport './RegistrationForm.css';\r\nimport genderList from \"./resources/genders\";\r\nimport Select from \"react-select\";\r\n\r\nclass RegistrationFormOrganization extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            organizationName:'',\r\n            organizationType: '',\r\n            responsibleUserName: '',\r\n            valid: {\r\n                organizationName: true,\r\n                organizationType: true,\r\n                responsibleUserName: true,\r\n            },\r\n            touched: {\r\n                organizationName:false,\r\n                organizationType: false,\r\n                responsibleUserName: false,\r\n            },\r\n            modalisOpen: false\r\n        };\r\n\r\n        this.rexExpMap = {\r\n            organizationName: /^[a-zA-Z\\u00c4\\u00e4\\u00d6\\u00f6\\u00dc\\u00fc\\u00df]+$/,\r\n            organizationType: /^[a-zA-Z\\u00c4\\u00e4\\u00d6\\u00f6\\u00dc\\u00fc\\u00df]+$/,\r\n            responsibleUserName: /^[a-zA-Z\\u00c4\\u00e4\\u00d6\\u00f6\\u00dc\\u00fc\\u00df]+$/,\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.checkData = this.checkData.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.checkOnSubmit = this.checkOnSubmit.bind(this);\r\n\r\n    }\r\n\r\n    handleChange = (e, name) => {\r\n        this.setState({[e.target.name]: e.target.value}, () => {\r\n            this.checkData(this.rexExpMap[name], this.state[name], this.state.valid[name], name)\r\n        });\r\n    }\r\n\r\n    checkData(regExp, stateName, stateValid, name) {\r\n        this.setState({\r\n            touched: {...this.state.touched, [name]: true}\r\n        });\r\n        if (regExp.test(stateName)) {\r\n            this.setState({\r\n                valid: {...this.state.valid, [name]: true}\r\n            });\r\n        } else {\r\n            this.setState({\r\n                valid: {...this.state.valid, [name]: false}\r\n            });\r\n        }\r\n    }\r\n\r\n    validate(organizationName, organizationType, responsibleUserName) {\r\n        return {\r\n            organizationName: organizationName.length === 0,\r\n            organizationType: organizationType.length === 0,\r\n            // responsibleUserName: responsibleUserName.length ===0,\r\n        };\r\n    }\r\n\r\n    requiredStyle(name) {\r\n        const show = (this.state[name] === \"\" || !this.state.valid[name]) && this.state.touched[name];\r\n        return {display: show ? 'block' : 'none'};\r\n    }\r\n\r\n    errorMessages(name) {\r\n        const requiredStr = 'This field is required.';\r\n        const invalidStr = 'Enter valid ' + name + '.';\r\n        return !this.state.valid[name] && this.state[name] !== \"\" ? invalidStr : requiredStr;\r\n    }\r\n\r\n    checkOnSubmit() {\r\n        const {organizationName, organizationType, responsibleUserName} = this.state;\r\n        const formFilled = !(organizationName === '' || organizationType === '' || responsibleUserName === '');\r\n        const formInvalid = Object.keys(this.state.valid).some(x => !this.state.valid[x]);\r\n        const formHasErrors = !formFilled || formInvalid;\r\n\r\n        if (!formHasErrors) {\r\n            this.toggleModal();\r\n        }\r\n        this.setState({\r\n            touched: {\r\n                organizationName:true,\r\n                organizationType: true,\r\n                responsibleUserName: true,\r\n            },\r\n        });\r\n\r\n        this.handleSubmit()\r\n    }\r\n\r\n    handleSubmit() {\r\n        fetch(`http://localhost:3001/admin/registerOrganization`, {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({...this.state})\r\n        })\r\n            .then(response => console.log(response.json()))\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState(prevState => ({\r\n            modalisOpen: !prevState.modalisOpen\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const errors = this.validate(this.state.organizationName, this.state.organizationType, this.responsibleUserName);\r\n        const shouldMarkError = (field) => {\r\n            const hasError = errors[field];\r\n            const shouldShow = this.state.touched[field];\r\n            return hasError ? shouldShow : false;\r\n        };\r\n        const helpMessage = (name) => {\r\n            return {display: shouldMarkError(name) ? 'none' : 'block'};\r\n        };\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"register-form\">\r\n                    <div className=\"form\">\r\n                        <div>\r\n                            <label>\r\n                                שם ארגון\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.organizationName}\r\n                                    name=\"organizationName\"\r\n                                    className={shouldMarkError(\"organizationName\") ? \"error\" : \"\"}\r\n                                    onChange={(e) => this.handleChange(e, \"organizationName\")}/>\r\n                            </label>\r\n                            <span className=\"required-field\"\r\n                                  style={this.requiredStyle('organizationName')}>{this.errorMessages('organizationName')}</span>\r\n                        </div>\r\n                        <div>\r\n                            <label>\r\n                                סוג ארגון\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.organizationType}\r\n                                    name=\"organizationType\"\r\n                                    className={shouldMarkError(\"organizationType\") ? \"error\" : \"\"}\r\n                                    onChange={(e) => this.handleChange(e, \"organizationType\")}/>\r\n                            </label>\r\n                            <span className=\"required-field\"\r\n                                  style={this.requiredStyle('organizationType')}>{this.errorMessages('organizationType')}</span>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label>\r\n                                אחראי מתנדבים\r\n                                <Select\r\n                                    name=\"responsibleUserName\"\r\n                                    className={shouldMarkError(\"responsibleUserName\") ? \"error\" : \"\"}\r\n                                    value ={this.state.responsibleUserName}\r\n                                    options={this.props.users}\r\n                                    onChange={(value)=>this.setState({responsibleUserName: value})}\r\n                                />\r\n\r\n                            </label>\r\n                            <span className=\"required-field\"\r\n                                  style={this.requiredStyle('responsibleUserName')}>{this.errorMessages('responsibleUserName')}</span>\r\n                        </div>\r\n\r\n                        <div className=\"sb-text\">By clicking Submit, I agree that I have read and accepted the&nbsp;\r\n                            <a href='TermsandConditions'>Terms and Conditions.</a>\r\n                        </div>\r\n                        <button className=\"sb-btn\" type=\"button\" onClick={this.checkOnSubmit}>SUBMIT</button>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                {this.state.modalisOpen ?\r\n                    <Modal\r\n                        text='Your Data'\r\n                        {...this.state}\r\n                        closeModal={this.toggleModal}\r\n                    />\r\n                    : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default RegistrationFormOrganization;\r\n\r\n","C:\\Users\\ziv\\WebstormProjects\\project\\src\\RegistrationFormVolunteer.js",[],"C:\\Users\\ziv\\WebstormProjects\\project\\src\\Modal.js",[],"C:\\Users\\ziv\\WebstormProjects\\project\\src\\resources\\genders.js",[],"C:\\Users\\ziv\\WebstormProjects\\project\\src\\resources\\languages.js",[],"C:\\Users\\ziv\\WebstormProjects\\project\\src\\resources\\areasOfInterest.js",[],"C:\\Users\\ziv\\WebstormProjects\\project\\src\\resources\\cities.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":5,"column":8,"nodeType":"70","messageId":"71","endLine":5,"endColumn":21},{"ruleId":"68","severity":1,"message":"72","line":6,"column":8,"nodeType":"70","messageId":"71","endLine":6,"endColumn":27},{"ruleId":"68","severity":1,"message":"73","line":7,"column":8,"nodeType":"70","messageId":"71","endLine":7,"endColumn":18},{"ruleId":"68","severity":1,"message":"74","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":18},{"ruleId":"68","severity":1,"message":"75","line":122,"column":15,"nodeType":"70","messageId":"71","endLine":122,"endColumn":26},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'languagesList' is defined but never used.","Identifier","unusedVar","'areasOfInterestList' is defined but never used.","'citiesList' is defined but never used.","'genderList' is defined but never used.","'helpMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]